group 'com.qaobee'
version '0.1'

/*
Usage:
./gradlew task_name
(or gradlew.bat task_name if you have the misfortune to have to use Windows)
If no task name is specified then the default task 'assemble' is run
Task names are:
idea - generate a skeleton IntelliJ IDEA project
eclipse - generate a skeleton Eclipse IDE project
assemble - builds the outputs, by default this is the module zip file. It can also include a jar file if produceJar
          in gradle.properties is set to true. Outputs are created in build/libs.
          if pullInDeps in gradle.properties is set to 'true' then the modules dependencies will be
          automatically pulled into a nested mods directory inside the module during the build
copyMod - builds and copies the module to the local 'mods' directory so you can execute vertx runmod (etc)
          directly from the command line
modZip - creates the module zip into build/libs
clean - cleans everything up
test - runs the tests. An nice html test report is created in build/reports/tests (index.html)
runMod - runs the module. This is similar to executing vertx runmod from the command line except that it does
         not use the version of Vert.x installed and on the PATH to run it. Instead it uses the version of Vert.x
         that the module was compiled and tested against.
pullInDeps - pulls in all dependencies of the module into a nested module directory
uploadArchives - upload the module zip file (and jar if one has been created) to Nexus. You will need to
                 configure sonatypeUsername and sonatypePassword in ~/.gradle/gradle.properties.
install - install any jars produced to the local Maven repository (.m2)
 */

repositories {
    flatDir {
        dirs 'lib'
    }
}
buildscript {
    repositories {
        maven {
            url "http://repo1.maven.org/maven2/"
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        mavenLocal()
    }
    dependencies {
        classpath 'org.ajoberstar:gradle-jacoco:0.3.0'
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.2.1"
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.13.0'
        classpath "gradle.plugin.se.bjurr.gitchangelog:git-changelog-gradle-plugin:1.40"
    }
}
apply from: "gradle/vertx.gradle"
apply plugin: 'org.sonarqube'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'project-report'
apply plugin: "se.bjurr.gitchangelog.git-changelog-gradle-plugin"
dependencies {
    compile "org.codehaus.groovy:groovy-all:$groovyVersion"
    compile "io.vertx:lang-groovy:$groovyLangModVersion@jar"

    compile 'org.mongodb:mongo-java-driver:2.13.2'
    compile 'org.apache.commons:commons-lang3:3.5'
    compile 'commons-io:commons-io:2.5'
    compile 'org.apache.commons:commons-email:1.4'
    compile 'commons-codec:commons-codec:1.10'
    compile 'com.englishtown:vertx-mod-when:1.2.0-final'
    compile 'com.google.inject:guice:4.0'
    compile 'com.google.code.findbugs:jsr305:3.0.1'
    compile 'org.reflections:reflections:0.9.10'
    compile 'org.imgscalr:imgscalr-lib:4.2'
    compile 'org.xhtmlrenderer:flying-saucer-pdf:9.1.1'
    compile 'com.google.api-client:google-api-client:1.22.0'
    compile 'org.freemarker:freemarker:2.3.23'
    compile 'commons-beanutils:commons-beanutils:1.9.3'
    compile 'io.vertx:mod-mailer:2.0.0-final'
    compile ('net.rcarz:jira-client:0.5') {
        transitive = true
        exclude group:  'org.mockito'
        exclude group: 'junit:junit'
    }

    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.22'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.8'
    compile group: 'ch.qos.logback', name: 'logback-core', version: '1.1.8'


    testCompile 'de.flapdoodle.embed:de.flapdoodle.embed.mongo:1.50.5'
    testCompile 'com.jayway.restassured:rest-assured:2.9.0'
    testCompile "junit:junit:$junitVersion"
    testCompile name: 'vertx-junit-annotations-2.1RC2'
    testCompile 'org.mock-server:mockserver-netty:3.10.4'

}
test {
    minHeapSize = "128m"
    maxHeapSize = "512m"
    maxParallelForks = 1
    include 'com/qaobee/hive/test/api/**'
    beforeTest { descriptor ->
        logger.lifecycle("Running test: $descriptor")
    }
}
htmlDependencyReport {
    projects = project.allprojects
}
sonarqube {
    check
    properties {
        // Sonar Specific properties
        // This is the display project name
        property 'sonar.projectName', 'Qaobee-Hive'
        // This is the Sonar Server
        property 'sonar.host.url', 'http://build.qaobee.com:9000'
        property 'sonar.projectKey', 'com.qaobee:qaobee-hive'
        property 'sonar.profile', 'Sonar way'
        property 'sonar.language', 'java'
        property 'sonar.sources', 'src/main/java'
        property 'sonar.tests', 'src/test/java'
        property 'sonar.jacoco.reportPath', 'build/jacoco/jacocoTest.exec'
        property 'sonar.binaries', 'build/classes/main'
    }
}

def getVersion(inc) {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--abbrev=0', '--tags'
        standardOutput = stdout
    }
    def v = stdout.toString().trim().substring(1).tokenize('.').toArray()
    def gitVersion = [
            major: v[0].toInteger(),
            minor: v[1].toInteger(),
            patch: v[2].toInteger() + inc
    ]
    def version = 'v' + gitVersion.values().join('.')
    return version
}
task gitChangelogTask(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
    filePath = "build/docs/changelog/index.html"
    templateContent = new File('changelog.mustache').getText('UTF-8')
    fromRef = getVersion(-5)
}

/*
If you're uploading stuff to Maven, Gradle needs to generate a POM.
Please edit the details below.
 */

@SuppressWarnings(["GroovyAssignabilityCheck", "GroovyAssignabilityCheck", "GroovyAssignabilityCheck", "GroovyAssignabilityCheck", "GroovyAssignabilityCheck"])
def configurePom(def pom) {
    pom.project {
        name rootProject.name
        description 'Qaobee Hive'
        inceptionYear '2015'
        packaging 'jar'

        url 'Your project url'

        developers {
            developer {
                id 'Giwi'
                name 'Xavier MARIN'
                email 'marin.xavier@gmail.com'
            }
        }

        scm {
            url 'url to your repo - e.g. github repo url'
        }

        licenses {
            license {
                name 'The Apache Software License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                distribution 'repo'
            }
        }

        properties {
            setProperty('project.build.sourceEncoding', 'UTF8')
        }
    }
}

