import groovy.json.JsonSlurper
import groovy.json.JsonOutput

group 'com.qaobee'
version '0.1'
buildscript {
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.github.jengelman.gradle.plugins:shadow:1.2.4"
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.14.0'
        classpath 'org.ajoberstar:gradle-jacoco:0.3.0'
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.2.1"
        classpath "gradle.plugin.se.bjurr.gitchangelog:git-changelog-gradle-plugin:1.40"
    }
}
apply plugin: 'application'
apply plugin: "com.github.johnrengelman.shadow"
apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'org.sonarqube'
apply plugin: 'project-report'
apply plugin: "se.bjurr.gitchangelog.git-changelog-gradle-plugin"
def generateSrcPath="$buildDir/generated-src"
def generatedSrcDir = file("$buildDir/generated-src")
def version = '3.4.2'
mainClassName = 'com.qaobee.hive.Main'
repositories {
    jcenter()
}
sourceSets {
    main {
        java.srcDirs += generatedSrcDir
        output.dir(builtBy: 'generateServiceProxy', generateSrcPath)
    }
}

if (!JavaVersion.current().java8Compatible) {
    throw new IllegalStateException('''A Haiku:
                                      |  This needs Java 8,
                                      |  You are using something else,
                                      |  Refresh. Try again.'''.stripMargin())
}

repositories {
    mavenCentral()
    maven {
        url = 'http://oss.sonatype.org/content/repositories/snapshots/'
    }
}

dependencies {
    compile "io.vertx:vertx-core:$version"
    compile "io.vertx:vertx-mongo-client:$version"
    compile "io.vertx:vertx-web:$version"
    compile "io.vertx:vertx-service-proxy:$version"
    compile "io.vertx:vertx-codegen:$version"
    compile "io.vertx:vertx-mail-client:$version"
    compile "io.vertx:vertx-web-client:$version"
    compile 'org.reflections:reflections:0.9.11'
    compile 'org.apache.commons:commons-lang3:3.5'
    compile 'com.google.inject:guice:4.1.0'
    compile 'com.google.inject.extensions:guice-assistedinject:4.1.0'
    compile 'com.google.inject.extensions:guice-throwingproviders:4.1.0'
    compile 'org.apache.commons:commons-lang3:3.5'
    compile 'commons-io:commons-io:2.5'
    compile 'org.apache.commons:commons-email:1.4'
    compile 'commons-codec:commons-codec:1.10'
    compile 'org.apache.commons:commons-exec:1.3'
    compile 'com.google.inject:guice:4.0'
    compile 'com.google.code.findbugs:jsr305:3.0.1'
    compile 'org.xhtmlrenderer:flying-saucer-pdf:9.1.1'
    compile 'com.google.api-client:google-api-client:1.22.0'
    compile 'org.freemarker:freemarker:2.3.23'
    compile 'commons-beanutils:commons-beanutils:1.9.3'
    compile('net.rcarz:jira-client:0.5') {
        transitive = true
        exclude group: 'org.mockito'
        exclude group: 'junit:junit'
    }

    compile 'org.slf4j:slf4j-api:1.7.22'
    compile 'ch.qos.logback:logback-classic:1.1.8'
    compile 'ch.qos.logback:logback-core:1.1.8'
    compile 'com.stripe:stripe-java:4.7.0'
    compile 'org.jdeferred:jdeferred-core:1.2.6'
    compile 'org.imgscalr:imgscalr-lib:4.2'


    testCompile "io.vertx:vertx-unit:$version"
    testCompile 'de.flapdoodle.embed:de.flapdoodle.embed.mongo:2.0.0'
    testCompile 'junit:junit:4.12'
    testCompile 'org.mock-server:mockserver-netty:3.10.5'
    testCompile 'com.jayway.restassured:rest-assured:3.0.3'
    testCompile 'de.flapdoodle.embed:de.flapdoodle.embed.mongo:1.50.5'
}

shadowJar {
    classifier = 'fat'
    manifest {
        attributes 'Main-Class': 'Main'
    }
    mergeServiceFiles {
        include 'META-INF/services/io.vertx.core.spi.VerticleFactory'
    }
    doLast {
        copy {
            from "$buildDir/libs/"
            into "application/"
        }
    }
}

task generateServiceProxy(type: JavaCompile, description: 'Generates EBServiceProxies') {
    source = sourceSets.main.java
    classpath = configurations.compile
    destinationDir = generatedSrcDir
    options.compilerArgs = [
            "-proc:only",
            "-processor", "io.vertx.codegen.CodeGenProcessor",
            "-AoutputDirectory=$generateSrcPath"
    ]
}


compileJava.dependsOn generateServiceProxy

test {
    minHeapSize = "128m"
    maxHeapSize = "1024m"
    maxParallelForks = 1
    jvmArgs '-Djava.security.egd=file:/dev/urandom -Dfile.encoding=UTF-8'
    include 'com/qaobee/hive/test/api/**'
    beforeTest { descriptor ->
        logger.lifecycle("Running test: $descriptor")
    }
}
htmlDependencyReport {
    projects = project.allprojects
}
sonarqube {
    check
    properties {
        // Sonar Specific properties
        // This is the display project name
        property 'sonar.projectName', 'Qaobee-Hive'
        // This is the Sonar Server
        property 'sonar.host.url', 'http://build.qaobee.com:9000'
        property 'sonar.projectKey', 'com.qaobee:qaobee-hive'
        property 'sonar.profile', 'Sonar way'
        property 'sonar.language', 'java'
        property 'sonar.sources', 'src/main/java'
        property 'sonar.tests', 'src/test/java'
        property 'sonar.jacoco.reportPath', 'build/jacoco/jacocoTest.exec'
        property 'sonar.binaries', 'build/classes/main'
    }
}

def getVersion(inc) {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--abbrev=0', '--tags'
        standardOutput = stdout
    }
    def v = stdout.toString().trim().substring(1).tokenize('.').toArray()
    def gitVersion = [
            major: v[0].toInteger(),
            minor: v[1].toInteger(),
            patch: v[2].toInteger() + inc
    ]
    def version = 'v' + gitVersion.values().join('.')
    return version
}

task gitChangelogTask(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
    filePath = "build/docs/changelog/index.html"
    templateContent = new File('changelog.mustache').getText('UTF-8')
    fromRef = getVersion(-5)
}

task updateRancherImage {
    def dockerVersion = findProperty("dockerVersion")
    if(dockerVersion != null) {
        def url = "http://vps234741.ovh.net:8080/v2-beta/projects/1a7/services/1s22/"
        def creds = "854D77F36BD20C5D89FE:p8ktQVdpEdGp4rwfJCfFoq5abCL2eYTXSHwee3ot"
        def p = ['curl', '-u', creds, '-H', "'Accept: application/json'", '-H', "'Content-Type: application/json'", url].execute()
        def json = new JsonSlurper().parseText(p.text).upgrade
        def imageUid = json.inServiceStrategy.launchConfig.imageUuid.split(':')
        println "upgrading  ${imageUid[1]} from ${imageUid[2]} to ${dockerVersion}"
        imageUid[2] = dockerVersion
        json.inServiceStrategy.launchConfig.imageUuid = imageUid.join(':')

        def req = new JsonSlurper().parseText('{"inServiceStrategy": {}}')
        req.inServiceStrategy = json.inServiceStrategy
        def request = JsonOutput.toJson(req)
        def r = ['bash', '-c', "curl -X POST -u ${creds} -H 'Content-Type: application/json' -d '${request}' ${url}?action=upgrade"].execute()
        def resp = new JsonSlurper().parseText(r.text)
        if (resp.type != "error") {
            def upgraded = false
            while (!upgraded) {
                Thread.sleep(2000L)
                def state = new JsonSlurper().parseText(['curl', '-u', creds, '-H', "'Accept: application/json'", '-H', "'Content-Type: application/json'", url].execute().text)
                println state.state
                upgraded = "upgraded" == state.state
                if("active" == state.state) return 0
            }
            ['bash', '-c', "curl -X POST -u ${creds} -H 'Content-Type: application/json' -d '{}' ${url}?action=finishupgrade"].execute()
        }
    }
}

/*
If you're uploading stuff to Maven, Gradle needs to generate a POM.
Please edit the details below.
 */

@SuppressWarnings(["GroovyAssignabilityCheck", "GroovyAssignabilityCheck", "GroovyAssignabilityCheck", "GroovyAssignabilityCheck", "GroovyAssignabilityCheck"])
def configurePom(def pom) {
    pom.project {
        name rootProject.name
        description 'Qaobee Hive'
        inceptionYear '2015'
        packaging 'jar'

        url 'Your project url'

        developers {
            developer {
                id 'Giwi'
                name 'Xavier MARIN'
                email 'marin.xavier@gmail.com'
            }
        }

        scm {
            url 'url to your repo - e.g. github repo url'
        }

        licenses {
            license {
                name 'The Apache Software License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                distribution 'repo'
            }
        }

        properties {
            setProperty('project.build.sourceEncoding', 'UTF8')
        }
    }
}
